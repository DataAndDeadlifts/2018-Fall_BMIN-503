# Plot roc curve of
plot.roc(data$status, rf.pred, ci=TRUE)
plot.roc(obs.outputs, rf.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
rf.roc <- plot.roc(data$status, rf.pred, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(rf.roc), col="grey")
View(glm)
col_p.sorted
col_p.sorted
sorted_preds
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[,col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[0:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[1:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[:len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[,len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[1:len_top_p]
len_top_p <- length(col_p.sorted)
names(col_p.sorted)
names(sorted_preds)[1:len_top_p]
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
top_rf <- list(sorted_preds[1:len_top_p])
top_rf <- sorted_preds[1:len_top_p]
# We'll go with the top 11 variables
# Log reg
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
data[,top_logreg]
top_logreg
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_logreg
data[,top_logreg]
top_rf
top_rf <- names(sorted_preds[1:len_top_p])
top_rf
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_logreg
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted) + "status"
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted) + ["status"]
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
top_glm <- glm(status~., data=data[,top_logreg], family=binomial(logit))
top_glm_preds <- predict(top_glm, data[, top_logreg])
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
top_glm_preds
top_glm_preds <- predict(top_glm, data[, top_logreg], type="response")
top_glm_preds
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
#append(top_logreg, "status")
top_rf_cols <- append(names(sorted_preds[1:len_top_p]),"status")
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
# We'll go with the top 11 variables
# Log reg
top_logreg_cols <- append(names(col_p.sorted),"status")
top_glm <- glm(status~., data=data[,top_logreg_cols], family=binomial(logit))
top_glm_preds <- predict(top_glm, data[, top_logreg_cols], type="response")
#append(top_logreg, "status")
top_rf_cols <- append(names(sorted_preds[1:len_top_p]),"status")
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg_cols], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg_cols], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf_cols], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf_cols], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
#GLM RocAuc
roc(data$status, top_glm_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_glm_preds, ci=TRUE)
plot.roc(top_obs.outputs, glm_top.pred.outputs, col="red", add=TRUE)
#GLM RocAuc
roc(data$status, top_glm_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_glm_preds, ci=TRUE)
plot.roc(top_obs.outputs, glm_top.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
glm_top.roc <- plot.roc(data$status, top_glm_preds, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(glm_top.roc), col="grey")
#RF RocAuc
roc(data$status, top_rf_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_rf_preds, ci=TRUE)
plot.roc(top_obs.outputs, rf_top.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
rf_top.roc <- plot.roc(data$status, top_rf_preds, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(rf_top.roc), col="grey")
# Get gene names
library(hgu133plus2.db)
#source("http://bioconductor.org/biocLite.R")
#biocLite("GEOquery")
#biocLite("oligo")
#biocLite("limma")
#biocLite("hgu133plus2.db")
#biocLite("pd.hg.u133.plus.2")
#biocLite("viridis")
#install.packages("gplots")
library(GEOquery)
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
biocLite("oligo")
biocLite("limma")
biocLite("hgu133plus2.db")
biocLite("pd.hg.u133.plus.2")
biocLite("viridis")
install.packages("gplots")
library(GEOquery)
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir="./GSE27973/data")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16_and_CSE"))
pData(raw.data)
par(mar=c(9,5,1,1))
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
GSE27973.rma <- rma(raw.data)
par(mar=c(9,5,1,1))
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values", las=2)
GSE27973.qc <- raw.data[, !sampleNames(raw.data) %in% "GSE27973.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1+factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
#Fit a linear model, according to limma package implementation, to expression data using design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE-medium,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", p.value = 0.05)
head(treatment_results)
nrow(treatment_results)
# Get gene names
library(hgu133plus2.db)
library(ggplot2)
library(dplyr)
# Output all differential expression results
full_res <- topTable(fit2, coef="treatment" , adjust="BH", num=Inf)
# Assign (in)significant genes
full_res$sig <- rep("insignificant", nrow(full_res))
full_res$sig[which(full_res$adj.P.Val<0.05)] <- "significant"
full_res.significant <- full_res[full_res$sig == "significant",]
full_res.significant$ID = row.names(full_res.significant)
full_res.significant$SYMBOL <- lapply(full_res.significant$ID, function(x) mget(x, env=hgu133plus2SYMBOL, ifnotfound=NA)[[1]])
full_res.significant <- full_res.significant[order(full_res.significant$P.Value),]
top_probe <- rownames(full_res.significant)[1]
top_gene <- full_res.significant$SYMBOL[[1]]
num_probes_corr_to_top_gene <- nrow(full_res.significant[full_res.significant$SYMBOL==top_gene,])
df_boxplot=data.frame(
expression=exprs(GSE27973.qc.rma)[top_probe, ],
treatment=GSE27973.qc.rma$treatment)
ggplot(df_boxplot, aes(x=treatment,y=expression)) +
geom_boxplot(outlier.colour=NA, color="grey18", fill="lightgreen") +
stat_boxplot(geom='errorbar', color="grey18") +
geom_jitter(size=1, position=position_jitter(width=0.3)) +
ggtitle(paste("Boxplot for probe ", top_probe)) +
xlab("")+
ylab("RMA-intensity")+
theme_bw() +
theme(legend.position="none")
library(gplots)
top.eset <- GSE27973.qc.rma[row.names(exprs(GSE27973.qc.rma)) %in% row.names(full_res.significant)]
heatmap.2(exprs(top.eset), trace="none", keysize=1.5, key.title=NA, margins = c(11,8))
#Add status to top of plot
status.colors <- unlist(lapply(GSE27973.qc.rma$treatment, function(x){if (x=="CSE") "navy" else if (x=="medium") "red" else if (x=="RV16") "orange" else "yellow"}))
par(mar=c(7,4,4,2)+0.1)
heatmap.2(exprs(top.eset), col=viridis(256, option="B"),
trace="none", keysize=1.5, key.title=NA,
ColSideColors=status.colors, margins = c(11,8))
legend("topright", legend=c("CSE", "medium", "RV16", "RV16_and_CSE"), fill=c("navy", "red", "orange", "yellow"))
