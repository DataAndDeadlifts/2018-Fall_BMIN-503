t_res = t.test(data.case[, i], data.control[, i])
p_val = t_res["p.value"][[1]]
if (p_val <= 0.05) {
col_p[colnames(data)[i]] <- p_val
}
}
col_p.sorted <- col_p[order(unlist(col_p))]
col_p.sorted
lowest_p <- names(col_p.sorted[[1]])
boxplot(v1~status, data=data, xlab="Status", ylab="V1")
#install.packages("ggdendro")
library(ggdendro)
data.hclust <- hclust(dist(data[,1:ncol(data)]), method="complete")
data.dend <- dendro_data(as.dendrogram(data.hclust))
labels <- label(data.dend)
labels$status <- data$status[as.numeric(levels(labels$label))]
ggplot(segment(data.dend)) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=labels, aes(label=label, x=x, y=0, color=status), size=4)
data.hclust.s <- hclust(dist(data[,1:ncol(data)]), method="single")
data.dend.s <- dendro_data(as.dendrogram(data.hclust.s))
labels <- label(data.dend.s)
labels$status <- data$status[as.numeric(levels(labels$label))]
ggplot(segment(data.dend.s)) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=labels, aes(label=label, x=x, y=0, color=status), size=4)
data.hclust.a <- hclust(dist(data[,1:ncol(data)]), method="average")
data.dend.a <- dendro_data(as.dendrogram(data.hclust.a))
labels <- label(data.dend.a)
labels$status <- data$status[as.numeric(levels(labels$label))]
ggplot(segment(data.dend.a)) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=labels, aes(label=label, x=x, y=0, color=status), size=4)
data.hclust.cut <- cutree(data.hclust, 2) #Cut where there are 3 clusters
table(data$status, data.hclust.cut)
data.hclust.cut.s <- cutree(data.hclust.s, 2) #Cut where there are 3 clusters
table(data$status, data.hclust.cut.s)
data.hclust.cut.a <- cutree(data.hclust.a, 2) #Cut where there are 3 clusters
table(data$status, data.hclust.cut.a)
train_data_ind <- sample(seq_len(nrow(data)), size=floor(0.75*nrow(data)))
train_data <- data[train_data_ind,]
test_data <- data[-train_data_ind,]
glm_all <- glm(status~., family=binomial(link='logit'), data=train_data)
coef_less_sig <- summary(glm_all)$coeff[,4] <= 0.05
#coef_less_sig
# Num significant variables
print("Num coefficients that are significant: ")
length(coef_less_sig[coef_less_sig==TRUE])
# Train data predictions - they're perfect!
glm.pred <- predict(glm_all, data, type="response")
data.rf <- randomForest(status ~ ., data=train_data, ntree=100, importance=TRUE)
sorted_preds <- sort(data.rf$importance[,4], decreasing=TRUE)
print("Top 5 predictors by MeanDecreaseGini")
print(names(sorted_preds[1:5]))
rf.pred <- as.numeric(factor(predict(data.rf, data, type="response")))
library(boot)
data.cv.glm <- cv.glm(train_data, glm_all, K=10)
data.cv.rf <- cv.glm(train_data, data.rf, K=10)
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
rf.pred.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train, family=binomial(logit))
glm.pred.curr <- predict(glm, test, type="response")
glm.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train, ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test, type="response")
rf.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
library(pROC)
#GLM RocAuc
roc(data$status, glm.pred, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, glm.pred, ci=TRUE)
plot.roc(obs.outputs, glm.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
glm.roc <- plot.roc(data$status, glm.pred, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(glm.roc), col="grey")
#RF RocAuc
roc(data$status, rf.pred, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, rf.pred, ci=TRUE)
plot.roc(obs.outputs, rf.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
rf.roc <- plot.roc(data$status, rf.pred, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(rf.roc), col="grey")
View(glm)
col_p.sorted
col_p.sorted
sorted_preds
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[,col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[0:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
sorted_preds[1:col_p.sorted]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[:len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[,len_top_p]
len_top_p <- length(col_p.sorted)
col_p.sorted
names(sorted_preds)[1:len_top_p]
len_top_p <- length(col_p.sorted)
names(col_p.sorted)
names(sorted_preds)[1:len_top_p]
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
top_rf <- list(sorted_preds[1:len_top_p])
top_rf <- sorted_preds[1:len_top_p]
# We'll go with the top 11 variables
# Log reg
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- col_p.sorted
top_rf <- sorted_preds[1:len_top_p]
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
data[,top_logreg]
top_logreg
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_logreg
data[,top_logreg]
top_rf
top_rf <- names(sorted_preds[1:len_top_p])
top_rf
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_logreg
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted) + "status"
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted) + ["status"]
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- names(col_p.sorted)
append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- names(sorted_preds[1:len_top_p])
append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
# We'll go with the top 11 variables
# Log reg
top_logreg <- append(names(col_p.sorted),"status")
top_glm <- glm(status~., data=data[,top_logreg], family=binomial(logit))
top_glm_preds <- predict(top_glm, data[, top_logreg])
#append(top_logreg, "status")
top_rf <- append(names(sorted_preds[1:len_top_p]),"status")
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
top_glm_preds
top_glm_preds <- predict(top_glm, data[, top_logreg], type="response")
top_glm_preds
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
#append(top_logreg, "status")
top_rf_cols <- append(names(sorted_preds[1:len_top_p]),"status")
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
# We'll go with the top 11 variables
# Log reg
top_logreg_cols <- append(names(col_p.sorted),"status")
top_glm <- glm(status~., data=data[,top_logreg_cols], family=binomial(logit))
top_glm_preds <- predict(top_glm, data[, top_logreg_cols], type="response")
#append(top_logreg, "status")
top_rf_cols <- append(names(sorted_preds[1:len_top_p]),"status")
top_rf <- randomForest(status~., data=data[,top_rf_cols], ntree=100, importance=TRUE)
top_rf_preds <- as.numeric(factor(predict(top_rf, data[,top_rf_cols], type="response")))
#append(top_rf, "status")
N = nrow(data)
K = 10
set.seed(1234)
s = sample(1:K, size=N, replace=T)
glm_top.pred.outputs <- vector(mode="numeric", length=N)
rf_top.pred.outputs <- vector(mode="numeric", length=N)
top_obs.outputs <- vector(mode="numeric", length=N)
offset <- 0
for(i in 1:K){
train <- filter(data, s != i)
test <- filter(data, s == i)
top_obs.outputs[1:length(s[s==i]) + offset] <- test$status
#GLM train/test
glm <- glm(status~., data=train[,top_logreg_cols], family=binomial(logit))
glm.pred.curr <- predict(glm, test[,top_logreg_cols], type="response")
glm_top.pred.outputs[1:length(s[s==i]) + offset] <- glm.pred.curr
#RF train/test
rf <- randomForest(status ~ ., data=train[,top_rf_cols], ntree=100, importance=TRUE)
rf.pred.curr <- predict(rf, test[,top_rf_cols], type="response")
rf_top.pred.outputs[1:length(s[s==i]) + offset] <- rf.pred.curr
offset <- offset + length(s[s==i])
}
#GLM RocAuc
roc(data$status, top_glm_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_glm_preds, ci=TRUE)
plot.roc(top_obs.outputs, glm_top.pred.outputs, col="red", add=TRUE)
#GLM RocAuc
roc(data$status, top_glm_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_glm_preds, ci=TRUE)
plot.roc(top_obs.outputs, glm_top.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
glm_top.roc <- plot.roc(data$status, top_glm_preds, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(glm_top.roc), col="grey")
#RF RocAuc
roc(data$status, top_rf_preds, ci=TRUE)
# Plot roc curve of
plot.roc(data$status, top_rf_preds, ci=TRUE)
plot.roc(top_obs.outputs, rf_top.pred.outputs, col="red", add=TRUE)
legend("bottomright", legend=c("Training", "Cross-Validation"), col=c("black", "red"), lwd=2)
rf_top.roc <- plot.roc(data$status, top_rf_preds, col="red", lwd=3, grid=TRUE)
plot(ci.thresholds(rf_top.roc), col="grey")
