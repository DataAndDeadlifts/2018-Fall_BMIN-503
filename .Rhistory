install.packages("tidyverse")
install.packages("tidyverse")
nhanes <- read.csv(url("https://raw.githubusercontent.com/HimesGroup/BMIN503/master/DataFiles/NHANES_2007to2008.csv"), header=TRUE)
str(nhanes)
head(nhanes, n=20) #First n lines
object.size(nhanes) #To see how large a dataset is before choosing tools to analyze
print(object.size(nhanes), units="Mb")
quantile(nhanes$RIDAGEYR, na.rm=TRUE) #To get quantiles
quantile(nhanes$RIDAGEYR, na.rm=TRUE, probs=c(0, .33, .66, 1))
table(nhanes$DMDEDUC2)
table(nhanes$DMDEDUC2, useNA="ifany") #To get a sense of values a variable can take and whether any look off
table(nhanes$RIAGENDR, nhanes$DMDEDUC2) #2D tables to compare variables
nhanes.male.adult <- nhanes[nhanes$RIAGENDR==1 & nhanes$RIDAGEYR>=18, ]
nhanes.white.black <- nhanes[nhanes$RIDRETH1 %in% c(3,4), ]
nhanes.nocollege <- nhanes[nhanes$DMDEDUC2 <= 3, ]
table(nhanes.nocollege$DMDEDUC2, useNA="ifany")
nhanes.nocollege.2 <- nhanes[which(nhanes$DMDEDUC2 <= 3), ] #which does not include NAs
table(nhanes.nocollege.2$DMDEDUC2, useNA="ifany")
nhanes.male.adult <- nhanes[nhanes$RIAGENDR==1 & nhanes$RIDAGEYR>=18, ]
nhanes.white.black <- nhanes[nhanes$RIDRETH1 %in% c(3,4), ]
nhanes.nocollege <- nhanes[nhanes$DMDEDUC2 <= 3, ]
table(nhanes.nocollege$DMDEDUC2, useNA="ifany")
nhanes.nocollege.2 <- nhanes[which(nhanes$DMDEDUC2 <= 3), ] #which does not include NAs
table(nhanes.nocollege.2$DMDEDUC2, useNA="ifany")
d = Sys.Date()
d
format(d, "%A, %b %d, %Y")
format(d, "%m/%d/%y")
weekdays(d)
d = Sys.Date()
d
format(d, "%A, %b %d, %Y")
format(d, "%m/%d/%y")
weekdays(d)
x <- c(1:3, NA, 5:7, NA)
x
is.na(x)
!is.na(x)
x[!is.na(x)]
sum(is.na(nhanes$INDHHIN2))
x <- c(1:3, NA, 5:7, NA)
x
is.na(x)
!is.na(x)
x[!is.na(x)]
sum(is.na(nhanes$INDHHIN2))
names(nhanes)
names(nhanes) <- toupper(names(nhanes))
names(nhanes)
t <- "A short sample sentence."
strsplit(t, " ")
x <- c("X_1", "X_2", "X_3_1", "X_3_2", "X4", "X5")
x
gsub("_", "", x)
sub("_", "", x) #Replaces first instance only
x <- c("X.1", "X.2", "X.3.1", "X.3.2", "X4", "X5")
gsub("[.]", "", x) #The "." needs to be escaped
sub("[.]", "", x) #Replaces first instance only
#Find the p-value entries
y <- c("GeneID", "FC1", "pvalue1", "FC2", "pvalue2", "FC3", "pvalue3", "overall.FC", "overall.pvalue")
grep("pvalue", y) #Returns a vector of matches
grep("pvalue", y, value=TRUE) #Returns a vector of entries that had match
y[grep("pvalue", y)]
grepl("pvalue", y) #Returns a TRUE/FALSE vector of length(y)
paste("Some", "text", "entries.")
x
paste(x, collapse=" ")
paste0("O", "n", "e", " ", "word") #Pastes with sep=""
#For example, to generate several file names while iterating in a for loop
for (i in 1:5){
file.name <- paste0("Page", toString(i), ".txt")
print(file.name)
}
library(dplyr)
nhanes <- rename(nhanes, id=SEQN, gender=RIAGENDR, age=RIDAGEYR, race=RIDRETH1, education=DMDEDUC2, income=INDHHIN2, health.provider=HUQ040)
head(nhanes)
nhanes <- mutate(nhanes, gender = factor(gender, levels=c(1, 2), labels=c("male", "female")))
head(nhanes) #Replaced existing column as factor
nhanes <- mutate(nhanes, adult.status = factor(age>=18, labels=c("child", "adult")))
head(nhanes) #Added a new column
nhanes.adult <- filter(nhanes, age >= 18)
head(nhanes.adult)
nhanes.adult.m <- filter(nhanes, age >= 18 & gender == "male")
head(nhanes.adult.m)
head(select(nhanes, age))
head(select(nhanes, age:education)) #Can use names for ranges with select function
head(select(nhanes, -(age:race))) #Can exclude ranges with "-"
nhanes.ordered <- arrange(nhanes, education)
head(nhanes.ordered)
tail(nhanes.ordered)
nhanes.ordered <- arrange(nhanes, desc(education)) #Descending order
head(nhanes.ordered)
tail(nhanes.ordered)
summarize(nhanes, age=mean(age))
nhanes.adult.child <- group_by(nhanes, adult.status)
summarize(nhanes.adult.child, age=mean(age))
nhanes %>%
mutate(adult.status = factor(age>=18, labels=c("child", "adult"))) %>%
group_by(adult.status) %>%
summarize(age=mean(age))
set.seed(1234)
varA <- sample(c(1:4, NA), nrow(nhanes), replace=TRUE, prob=c(rep(0.24, 4), .04))
table(varA, useNA="ifany")
dataframeA <- data.frame(cbind(nhanes$id, varA))
names(dataframeA) <- c("id", "varA")
head(dataframeA)
join1 <- left_join(nhanes[, c(1:6)], dataframeA)
head(join1)
dim(join1)
join2 <- inner_join(nhanes[, c(1:6)], dataframeA[c(1:1000), ])
head(join2)
dim(join2)
tail(join2)
join3 <- full_join(nhanes[, c(1:6)], dataframeA[c(1:1000), ])
head(join3)
dim(join3)
tail(join3)
col1 <- c(1:40)
col2 <- c(1:80)
col2 <- col2[lapply(col2, "%%", 2) == 0]
col3 <- rep(0, each=40)
col4 <- col1 * col2
m <- matrix(c(col1,col2,col3,col4),ncol=4)
head(m)
col5 <- rep(c('a','b'),20)
m <- cbind(m, col5)
head(m)
m2 <- data.frame(m)
colnames(m2) <- c("Index","EvenNums","Zeroes","V4","AB")
sapply(m2, class)
m2 <- transform(
m2, Index = as.numeric(Index),
EvenNums = as.numeric(EvenNums),
Zeroes = as.numeric(Zeroes),
V4 = as.numeric(V4)
)
sapply(m2, class)
L <- list()
L_names <- list()
for (i in c(1:nrow(m2))) {
L[i] <- list(c(m2[i,"EvenNums",],m2[i,"AB"]))
L_names[i] <- as.character(i)
}
names(L) <- L_names
print("30th element")
L[[30]]
print("Second element of the 30th element with brackets")
L[[30]][2]
print("Second element of the 30th element with '$'")
L$"30"[2]
my.f <- function(x) {
if (!(typeof(x) %in% c("double","numeric","integer"))) {
print("Input not integer!")
} else {
if (x %% 2 == 0) {
return(x)
} else {
return(x*2)
}
}
}
my.f(2)
my.f(3)
my.f(3L)
my.f(6L)
my.f("two")
data = read.csv("NHANES_2007to2008_Assignment-2.csv")
data = read.csv("NHANES_2007to2008_Assignment-2.csv")
data = read.csv("NHANES_2007to2008_Assignment-2.csv")
data = read.csv("NHANES_2007to2008_Assignment-2.csv")
data = read.csv("NHANES_2007to2008.csv")
print("Number of subjects:")
nrow(data)
print("Columns and data types:")
sapply(data, class)
sapply(data, function(y) sum(length(which(is.na(y)))))
print("Number of males:")
sum(data$RIAGENDR==1)
print("Number of females:")
sum(data$RIAGENDR==2)
table(data$HUQ040)
apply(table(data$HUQ040), 2, function(x) max(x, na.rm = TRUE))
apply(table(data$HUQ040), function(x) max(x, na.rm = TRUE))
apply(table(data$HUQ040), max, function(x) max(x, na.rm = TRUE))
max(table(data$HUQ040))
table(data$HUQ040)
max(table(data$HUQ040))
table(data$HUQ040)
max(table(data$HUQ040))
which.min(apply(data$HUQ040),MARGIN=2,min))
table(data$HUQ040)
max(table(data$HUQ040))
which.min(apply(data$HUQ040),MARGIN=2,min)
table(data$HUQ040)
max(table(data$HUQ040))
which.min(apply(data$HUQ040)min))
table(data$HUQ040)
max(table(data$HUQ040))
which.min(apply(data$HUQ040),min))
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
huq040_table
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
print("Adults 18 or older:")
nrow(data[data$RIDAGEYR >= 18, ])
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
#which(huq040_table==max_val)
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict = list(1="Clinic",2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- list(1="Clinic",2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c(1="Clinic",2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1)#,2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
print("Most common place;")
places_dict[which(hug040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1)#,2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
print("Most common place;")
places_dict[which(huq040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1)#,2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
print("Most common place;")
places_dict$which(huq040_table==max_val)
places_dict[which(huq040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1)#,2="Doctor's Office",3="Hospital Emergency Room",4="Hospital outpatient",5="Some other place",7="Refused",9="Don't know")
print("Most common place;")
places_dict[which(huq040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1,"Doctor's Office"=2,"Hospital Emergency Room"=3,"Hospital outpatient"=4,"Some other place"=5,"Refused"=7,"Don't Know"=9,)
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1,"Doctor's Office"=2,"Hospital Emergency Room"=3,"Hospital outpatient"=4,"Some other place"=5,"Refused"=7,"Don't Know"=9)
print("Most common place;")
places_dict[which(huq040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
which(huq040_table==max_val)
places_dict <- c("Clinic"=1,"Doctor's Office"=2,"Hospital Emergency Room"=3,"Hospital outpatient"=4,"Some other place"=5,"Refused"=7,"Don't Know"=9)
print("Most common place;")
places_dict[which(huq040_table==max_val)]
huq040_table <- table(data$HUQ040)
max_val <- max(huq040_table)
places_dict <- c("Clinic"=1,"Doctor's Office"=2,"Hospital Emergency Room"=3,"Hospital outpatient"=4,"Some other place"=5,"Refused"=7,"Don't Know"=9)
print("Most common place;")
places_dict[which(huq040_table==max_val)]
