test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc)
print(i)
rm(test_i, train_i, train_df_sample)
}
for (i in c(0.1, 0.25, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
if (length(aucs)==0){
aucs[[0]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc)
} else {
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc)
}
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs <- list()
length(aucs)
for (i in c(0.1, 0.25, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
if (length(aucs)==0){
aucs[[0]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc)
} else {
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc)
}
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs <- list()
for (i in c(0.1, 0.25, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs <- append(aucs, list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc))
print(i)
rm(test_i, train_i, train_df_sample)
}
for (i in c(0.1, 0.25, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs <- append(aucs, list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc))
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs_df <- as.data.frame(aucs)
View(aucs_df)
aucs <- list()
for (i in c(0.1, 0.25)){#, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs <- append(aucs, list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc))
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs_df <- as.data.frame(aucs, )
for (i in c(0.1, 0.25)){#, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs <- append(aucs, list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc[1]))
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs <- list()
for (i in c(0.1, 0.25)){#, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs <- append(aucs, list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc[1]))
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs_df <- as.data.frame(aucs)
View(aucs_df)
aucs <- list()
for (i in c(0.1, 0.25)){#, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc[1]))
for (i in c(0.1, 0.25)){#, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc[1])
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs_df <- as.data.frame(aucs)
View(aucs)
aucs_df <- as.data.frame(matrix(aucs))
View(aucs_df)
aucs_df <- as.data.frame(matrix(unlist(aucs)))
aucs_df <- as.data.frame(matrix(unlist(aucs), nrow=length(unlist(aucs[1]))))
View(aucs_df)
aucs_df <- as.data.frame(t(matrix(unlist(aucs), nrow=length(unlist(aucs[1])))))
View(aucs_df)
colnames(aucs_df) <- c("rel_size","auc")
aucs <- list()
for (i in c(0.1, 0.25, 0.5, 1, 5, 10, 25, 50, 75)){#, 75, 100, 125, 150, 175, 200, 225, 250, 275)){
samp_n <- ceiling(base_n * i)
# Get full train set
train_df_sample <- rbind(
filter(train_df, amy=="Amyloid"),
filter(train_df, amy=="Normal")[rand_ind[1:samp_n],]
)
# Split into train and test
test_samp_size <- floor(holdout * nrow(train_df_sample))
test_ind <- sample(seq_len(nrow(train_df_sample)), size=test_samp_size)
train_i <- train_df_sample[-test_ind,]
test_i <- train_df_sample[test_ind,]
# Train the logistic regression model
glm_reg <- glm(amy ~ ., data = train_i, family = binomial(logit))
glm_preds <- predict(glm_reg, test_i[, names(test_i) != "amy"], probability=TRUE)
aucs[[length(aucs)+1]] <- list(i, roc(test_i$amy, glm_preds, ci=TRUE)$auc[1])
print(i)
rm(test_i, train_i, train_df_sample)
}
aucs_df <- as.data.frame(t(matrix(unlist(aucs), nrow=length(unlist(aucs[1])))))
colnames(aucs_df) <- c("rel_size","auc")
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
geom_bar(stat="identity")
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
geom_bar(stat="identity") +
scale_x_discrete()
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
geom_bar(stat="identity") +
scale_x_discrete(rel_size)
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
geom_bar(stat="identity") +
scale_x_discrete("rel_size")
aucs_df$rel_size <- as.character(aucs_df$rel_size)
ggplot(aucs_df, aes(x=rel_size, y=auc)) +
geom_bar(stat="identity")
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
biocLite("oligo")
biocLite("limma")
biocLite("hgu133plus2.db")
biocLite("pd.hg.u133.plus.2")
biocLite("viridis")
install.packages("gplots")
library(GEOquery)
getGEOSuppFiles("GSE27973")
untar("./GSE27973/GSE27973_RAW.tar", exdir="./GSE27973/data")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$status <- c(rep("nonsmoker", 11), rep("smoker",13))
View(raw.data)
c(rep("medium_alone"),11)
pData(raw.data)$treatment <- c(rep("medium_alone"), rep("rhino_16_alone"), rep("CSE_alone"), rep("rhino_16_and_CSE"))
View(raw.data)
boxplot(raw.data, col="red", main="Raw Probe Intensities")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
library(GEOquery)
getGEOSuppFiles("GSE8823")
untar("./GSE8823/GSE8823_RAW.tar", exdir="./GSE8823/data")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE8823/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$status <- c(rep("nonsmoker", 11), rep("smoker",13))
pData(raw.data)
boxplot(raw.data, col="red", main="Raw Probe Intensities")
GSE8823.rma <- rma(raw.data)
boxplot(GSE8823.rma, col="blue", main="RMA Expression Values")
View(raw.data)
raw_data$status
pData(raw.data)
pData(raw.data)
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium_alone"), rep("rhino_16_alone"), rep("CSE_alone"), rep("rhino_16_and_CSE"))
pData(raw.data)
boxplot(raw.data, col="red", main="Raw Probe Intensities")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16+CSE"))
pData(raw.data)
boxplot(raw.data, col="red", main="Raw Probe Intensities")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16+CSE"))
pData(raw.data)
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
boxplot(raw.data, col="red", main="RAW Expression Values")
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE8823/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$status <- c(rep("nonsmoker", 11), rep("smoker",13))
pData(raw.data)
boxplot(raw.data, col="red", main="Raw Probe Intensities")
GSE8823.rma <- rma(raw.data)
boxplot(GSE8823.rma, col="blue", main="RMA Expression Values")
GSE8823.qc <- raw.data[, !sampleNames(raw.data) %in% "GSM219255.CEL.gz"]
GSE8823.qc.rma <- rma(GSE8823.qc)
design <- model.matrix(~ -1+factor(GSE8823.qc.rma$status))
colnames(design) <- levels(factor(GSE8823.qc.rma$status))
design
#Fit a linear model, according to limma package implementation, to expression data using design matrix model
fit <- lmFit(GSE8823.qc.rma, design)
#Create contrast groups of interest
GSE8823.contrast <- makeContrasts(smoking = smoker-nonsmoker,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE8823.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
smoking_results <- topTable(fit2, coef="smoking", adjust="BH", num=200)
head(smoking_results)
library(hgu133plus2.db)
smoking_results$ID = row.names(smoking_results)
smoking_results$SYMBOL <- lapply(smoking_results$ID, function(x) mget(x, env=hgu133plus2SYMBOL, ifnotfound=NA)[[1]])
head(smoking_results)
library(ggplot2)
# Output all differential expression results
full_res <- topTable(fit2, coef="smoking" , adjust="BH", num=Inf)
# Assign (in)significant genes
full_res$sig <- rep("insignificant", nrow(full_res))
full_res$sig[which(full_res$adj.P.Val<0.05)] <- "significant"
ggplot(full_res, aes(x=logFC, y=-log10(adj.P.Val), color=sig)) + geom_point() +
theme_bw() +
ggtitle("Volcano plot") +
xlab("logFC")+
ylab("-log10(q-value)") +
scale_color_manual(values=c("black","red")) +
theme(legend.position="none")
# A volcano plot could also be generated using a built-in limma function:
# volcanoplot(fit2, coef="smoking", highlight=10)
# make a data frame for gene expression of the probe
df_boxplot=data.frame(
expression=exprs(GSE8823.qc.rma)["1556180_at", ],
status=GSE8823.qc.rma$status)
ggplot(df_boxplot, aes(x=status,y=expression)) +
geom_boxplot(outlier.colour=NA, color="grey18", fill="lightgreen") +
stat_boxplot(geom='errorbar', color="grey18") +
geom_jitter(size=1, position=position_jitter(width=0.3)) +
ggtitle("Boxplot for probe 1556180_at") +
xlab("")+
ylab("RMA-intensity")+
theme_bw() +
theme(legend.position="none")
library(gplots)
top.eset <- GSE8823.qc.rma[row.names(exprs(GSE8823.qc.rma)) %in% row.names(smoking_results)]
heatmap.2(exprs(top.eset), trace="none", keysize=1.5, key.title=NA)
#Add status to top of plot
status.colors <- unlist(lapply(GSE8823.qc.rma$status, function(x){if (x=="smoker") "navy" else "red"}))
heatmap.2(exprs(top.eset), col=viridis(256, option="B"),
trace="none", keysize=1.5, key.title=NA,
ColSideColors=status.colors)
legend("topright", legend=c("smoker", "nonsmoker"), fill=c("red", "navy"))
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16+CSE"))
pData(raw.data)
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
par(mar=c(7,5,1,1))
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
par(mar=c(9,5,1,1))
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
GSE27973.qc <- raw.data[, !sampleNames(raw.data) %in% "GSE27973.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1+factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
#Fit a linear model, according to limma package implementation, to expression data using design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE-medium,
levels = design)
View(design)
library(oligo)
library(limma)
library(viridis)
celFiles <- list.celfiles("./GSE27973/data", full.names=TRUE, listGzipped=TRUE)
raw.data <- read.celfiles(celFiles)
pData(raw.data)
pData(raw.data)$treatment <- c(rep("medium"), rep("RV16"), rep("CSE"), rep("RV16_and_CSE"))
pData(raw.data)
par(mar=c(9,5,1,1))
boxplot(raw.data, col="red", main="RAW Expression Values", las=2)
GSE27973.rma <- rma(raw.data)
boxplot(GSE27973.rma, col="blue", main="RMA Expression Values")
GSE27973.qc <- raw.data[, !sampleNames(raw.data) %in% "GSE27973.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1+factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
#Fit a linear model, according to limma package implementation, to expression data using design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE-medium,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="CSE", adjust="BH", num=200)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="CSE", adjust="BH", num=10)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", num=10)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", num=200)
head(treatment_results)
nrow(filter(treatment_results), adj.P.Val < 0.05)
nrow(filter(treatment_results, adj.P.Val < 0.05))
head(treatment_results)
View(treatment_results)
nrow(filter(treatment_results$adj.P.Val < 0.05))
nrow(treatment_results$adj.P.Val < 0.05)
treatment_results$adj.P.Val < 0.05
treatment_results[treatment_results$adj.P.Val < 0.05,]
nrow(treatment_results[treatment_results$adj.P.Val < 0.05,])
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH")
head(treatment_results)
nrow(treatment_results[treatment_results$adj.P.Val < 0.05,])
head(treatment_results)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", p.value = 0.05)
head(treatment_results)
nrow(treatment_results)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = medium-CSE,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", p.value = 0.05)
head(treatment_results)
nrow(treatment_results)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE-medium,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", p.value = 0.05)
head(treatment_results)
nrow(treatment_results)
GSE27973.qc <- raw.data[, !sampleNames(raw.data) %in% "GSE27973.CEL.gz"]
GSE27973.qc.rma <- rma(GSE27973.qc)
design <- model.matrix(~ -1+factor(GSE27973.qc.rma$treatment))
colnames(design) <- levels(factor(GSE27973.qc.rma$treatment))
design
#Fit a linear model, according to limma package implementation, to expression data using design matrix model
fit <- lmFit(GSE27973.qc.rma, design)
#Create contrast groups of interest
GSE27973.contrast <- makeContrasts(treatment = CSE-medium,
levels = design)
#Get the contrasts for samples of interest
fit2 <- contrasts.fit(fit, GSE27973.contrast)
#Adjust fit coefficients using an empirical Bayes moderation of standard errors
fit2 <- eBayes(fit2)
#Results for each hypothesis test can be extracted using
treatment_results <- topTable(fit2, coef="treatment", adjust="BH", p.value = 0.05)
head(treatment_results)
nrow(treatment_results)
